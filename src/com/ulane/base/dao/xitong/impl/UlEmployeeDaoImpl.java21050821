package com.ulane.base.dao.xitong.impl;
/*
 *  北京优创融联科技有限公司 综合客服管理系统   --  http://www.ulane.cn
 *  Copyright (C) 2008-2010 Beijing Ulane Technology Co., LTD
*/
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;



import net.fckeditor.response.GetResponse;
import net.fckeditor.tool.Utils;
import oracle.net.aso.q;

import org.apache.commons.lang.StringUtils;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.jbpm.api.Configuration;
import org.springframework.orm.hibernate3.HibernateCallback;

import com.htsoft.core.Constants;
import com.htsoft.core.command.QueryFilter;
import com.htsoft.core.dao.impl.BaseDaoImpl;
import com.htsoft.core.web.paging.PagingBean;
import com.htsoft.oa.model.system.AppFunction;
import com.htsoft.oa.model.system.AppRole;
import com.htsoft.oa.model.system.AppUser;
import com.htsoft.oa.model.system.FunUrl;
import com.htsoft.oa.model.system.Region;
import com.htsoft.oa.util.SqlBuilder;
import com.ulane.base.dao.xitong.UlEmployeeDao;

import com.ulane.base.model.xitong.Equipment;
import com.ulane.base.model.xitong.UlEmployee;
import com.ulane.core.util.JdbcHelper;
import com.ulane.core.util.JdbcWork;
import com.ulane.customer.model.customer.ConHis;
/**
 * 
 * @author cf0666@gmail.com
 *
 */

@SuppressWarnings({ "unchecked", "unused" })
public class UlEmployeeDaoImpl extends BaseDaoImpl<UlEmployee> implements UlEmployeeDao{

	protected static final String EId = null;

	public UlEmployeeDaoImpl() {
		super(UlEmployee.class);
		System.out.println("=========UlEmployeeDaoImpl==========="+UlEmployee.class);
	}

	/**
	 * 根据组织机构去查找员工
	 */
	@Override
	public List<UlEmployee> findByDepartment(String path, PagingBean pb) {
		List list = new ArrayList();
		String hql = new String();
		if ("0.".equals(path)) {
			hql = "from UlEmployee vo2 order by vo2.userNo asc"; // where vo2.delFlag = ?
//			list.add(Constants.FLAG_UNDELETED);
		} else {
			//TODO
			hql="select distinct au from UlEmployee au where au.ulDepartment.path like ? order by au.userNo asc";  // and au.delFlag=? 
			list.add(path + "%");
//			list.add(Constants.FLAG_UNDELETED);
		}
		return findByHql(hql, list.toArray(), pb);
	}
	
	public UlEmployee getEmployeeByUserNo(String userNo) {
		String hql="select vo from UlEmployee vo where vo.userNo=?";
		List<UlEmployee> employees=findByHql(hql,new Object[]{userNo});
		if(employees!=null&&employees.size()>0) {
			return employees.get(0);
		} else {
			return null;
		}
	}

	@Override
	public Integer getEmployeeCount() {
		SqlBuilder.BEGIN();
		SqlBuilder.SELECT("count(*)");
		SqlBuilder.FROM("ul_employee");
		String sql_getCount = SqlBuilder.SQL();

		JdbcWork getCount = new JdbcWork() {
			@Override
			public Object fillData(ResultSet rs) {
				int result = 0;
				try {
					rs.next();
					result = rs.getInt(1);
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return result;
			}
		};
		JdbcHelper help = new JdbcHelper();
		help.setJdbcWork(getCount);
		help.setSql(sql_getCount);

		return (Integer) getHibernateTemplate().execute(help);
	}

	//查询员工信息
	public List<UlEmployee> getShowList() {
		String hql = "from UlEmployee vo2 order by vo2.userNo asc";
		List<UlEmployee> ue= this.getHibernateTemplate().find(hql);
		System.out.println("select - -  SUCCESS");
		return ue ;
	}

	// 查看用户信息
	
	
	
	public AppUser selectSomeOne(){
		String hql = "from AppUser au where order by au.status=1 desc";
		List<AppUser> au= this.getHibernateTemplate().find(hql);
		System.out.println("select - -  SUCCESS");
		for(int i=0;i<au.size();i++){
		   System.out.println("排序："+au.get(i));
		}
		return null;
		
		//return (AppUser) au;
		//this.getHibernateTemplate().u
	}
	//03/14
	public void update(AppUser au){
		//String hql="update AppUser au";
		String hql="update AppUser au set au.delFlag=1 where au.status=3 or au.status=5 order by au.status=1 desc";
		System.out.println("===hql"+hql);
		System.out.println("状态以正常排序："+au.getStatus().toString());
		Query query=getSession().createQuery(hql);
		query.executeUpdate();
	
		//this.getHibernateTemplate().update(au);
		System.out.println("update  - - SUCCESS----");
	}
	
	//03/14
	public AppUser selectSomeOne(Long id){
		String hql = "from AppUser au where au.ulEmployee.useid="+id;
		List<AppUser> au= this.getHibernateTemplate().find(hql);
		System.out.println("select - -  SUCCESS");
		//System.out.println("状态以正常排序："+au.get(0));
		return au.get(0);
		//return (AppUser) au;
		//this.getHibernateTemplate().u
	}
	
	/** 2014/4/2 设备管理的增删改查 */
	@Override
	// 1 显示设备的信息
	public List<Equipment> getShowEquipment(String equipmentId,
			String equipmentName) {
		
	     String hql = "from Equipment e where e.equipmentId=? or e.equipmentName=?";
		  Query query = getSession().createQuery(hql);
		  System.out.println("=============query" + query);
		  query.setString(0, equipmentId);
		 System.out.println("======0000000000======equipment" + equipmentId);
		 query.setString(1, equipmentName);
		 System.out.println("=====111111111========equipment" + equipmentName);
//	
		 return query.list();
		
	}

	// 修改和添加时的查询和查询显示全部的列表
	public List<Equipment> getShowEquipment() {
		// if(equipmentId==null && equipmentName==null){
		String hql = "from  Equipment  e where e.delFlag=1";
		List<Equipment> equipments = this.getHibernateTemplate().find(hql);
		System.out.println("=================equipments=" + equipments);
		System.out.println("===========equipments" + equipments.size());
		return equipments;
		// }

	}
/*
 * 2014/6/3 添加分页 修改
 * 
 * */
	
	public List<Equipment> getShowEquipment(Integer start, Integer limit) {

		SqlBuilder.BEGIN();
		SqlBuilder.SELECT("*");
		SqlBuilder.FROM("equipment");
		String sql = SqlBuilder.SQL();

		JdbcWork getdata = new JdbcWork() {
			@Override
			public Object fillData(ResultSet rs) {
				List<Equipment> result = new ArrayList<Equipment>();
				try {
					while (rs.next()) {
						Equipment e = new Equipment();
						e.setEId(rs.getLong("EId"));
						e.setEquipmentId(rs.getString("EQUIPMENTID"));
						e.setEquipmentName(rs.getString("EQUIPMENTNAME"));
						result.add(e);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return result;
			}
		};
		JdbcHelper help = new JdbcHelper();
		help.setJdbcWork(getdata);
		help.setSql(JdbcHelper.getPagingSql(sql, start, limit));
		return (List<Equipment>) getHibernateTemplate().execute(help);
	}

	
	// 删除
	public void getDelEquipment(Equipment eq) {
		this.getHibernateTemplate().delete(eq);
		// Query query=session.createQuery("delete from Equipment where EId=?");
		String hql = "delete from Equipment";
		System.out.println("===========eq" + eq);
		// eq.setEId(1,new Long(EId);
		System.out.println("========eid" + EId);

		// //this.getHibernateTemplate().update(hql, new Object[]{EId});
		// this.update(hql, new Object[]{EId});
		;
		// this.getHibernateTemplate().delete(eq);
		this.getHibernateTemplate().delete(hql, eq);
		// this.getHibernateTemplate().update(hql, eq);
		System.out.println("=====成功");

	}

	// @Override 单个删除设备2014/4/3
	public void getDelEquipment(Long EId) {
		System.out.println("===========EId" + EId);

		// Session session=(Session) this.getSessionFactory();
		// session.beginTransaction().begin();
//		Query query = getSession().createQuery(
//				"delete from Equipment e where e.EId=?");
		Query query=getSession().createSQLQuery("update  EQUIPMENT e set e.DELFLAG=0 where  e.EId=?");
		System.out.println("====================query" + query);
		query.setLong(0, EId);
		System.out.println("============ query.setLong(0, EId)"
				+ query.setLong(0, EId));
		query.executeUpdate();
		// session.beginTransaction().commit();
		System.out.println("==============dao删除====成功");

	}

	// 添加设备管理(注解：hibernate当中如果是添加，修改操作，一定要开启事务，关闭事务)

	public void addEquipment(String newname, String newId) {
		System.out.println("==============add    dao");
		Transaction tx = getSession().beginTransaction();
		Equipment eq = new Equipment();
		eq.setEquipmentId(newId);
		eq.setEquipmentName(newname);
		//this.getHibernateTemplate().saveOrUpdate(eq);
		//getSession().saveOrUpdate(eq);
		getSession().save(eq);
	   tx.commit();
	}

	// 修改 huyang3868@163.com

	public void updateEquipment(Long EId, String equipmentId,
			String equipmentName) {
		Transaction tx = getSession().beginTransaction();
		Equipment equipment = new Equipment();
		
		Query query = getSession()
				.createSQLQuery(
						"update Equipment e set e.equipmentId=?,e.equipmentName=? where EId=?");
		System.out.println("====query" + query);
		System.out.println("=======update=====query" + query);
		query.setString(0, equipmentId);
		query.setString(1, equipmentName);
		// query.setString(1,equipment.getEquipmentName());
		// query.setString(2, equipment.getEquipmentName());
		query.setLong(2, EId);
		System.out.println("e.equipmentId=?,e.equipmentName=? where EId=?"
				+ EId);
		// query.setLong(3, equipment.getEId());
		query.executeUpdate();

		tx.commit();

		System.out.println("==============dao修改====成功");

	}

	@Override
	// 查询用户和员工是否有关联
	public List<AppUser> selectOnly(Long id) {
		 String hql = "from AppUser au where au.ulEmployee.useid="+id;
		List<AppUser> au= this.getHibernateTemplate().find(hql);
		System.out.println("select - -  SUCCESS");
		//System.out.println("状态以正常排序："+au.get(0).getStatus());
		return au;
		
	}

	@Override
	public List<AppUser> updateOnly(AppUser au) {
		
		//String hql="update AppUser au set au.delFlag=1 where au.useid=?";
		String hql="update AppUser au set au.delFlag=1 where au.status=3 or au.status=5 order by au.status=1 desc";
		System.out.println("===hql"+hql);
		System.out.println("状态以正常排序："+au.getStatus().toString());
		Query query=getSession().createQuery(hql);
		query.setLong(0, au.getUserId());
		query.executeUpdate();
	
		//this.getHibernateTemplate().update(au);
		System.out.println("update  - - SUCCESS----");
		return query.list();
	}

	@Override
	public void getUpdateDelAppUser(Long useid) {
		 String hql = "update AppUser au set au.delFlag=1 where au.status=3 or au.status=5";
		//String hql="update AppUser au set au.delFlag=1 where au.status=3 or au.status=5";
		//String hql="update AppUser au set au.delFlag=1 where au.status=3 or au.status=5 order by au.status=1 desc";
		System.out.println("===hql"+hql);
		Query query=getSession().createQuery(hql);
		//query.setLong(0, useid);
		query.executeUpdate();
	
		//this.getHibernateTemplate().update(au);
		System.out.println("update  - - SUCCESS----");

	}

	
	

		
		

   

	
	
	
	
	
	

     /*
      * 查询设备管理中
      * 网点名称  2014/06/06
      * */
	@Override
	public List<Equipment> getEqName(String id) {
	
	   String hql="from Equipment e where  e.equipmentId='"+id+"'";
	   System.out.println("====dao==="+hql);
	   return this.getHibernateTemplate().find(hql);
		
		
	}

	@Override


	/*
	 * 2014/06/06   设备管理查询的分页
	 * 
	 * 
	 * */
	public String getShowEquipment(Integer start, Integer limit,
			String equipmentId, String equipmentName) {
		JdbcHelper helper = new JdbcHelper();
		
		SqlBuilder.BEGIN();
		SqlBuilder.SELECT("EQUIPMENTID,EQUIPMENTNAME");
		SqlBuilder.FROM("equipment");
		if(StringUtils.isNotEmpty(equipmentName)||StringUtils.isNotEmpty(equipmentId))
		  SqlBuilder.WHERE("equipmentId like"+"'%"+equipmentId+"%'");
		  SqlBuilder.WHERE("equipmentName like"+"'%"+equipmentName+"%'");
		String sql = SqlBuilder.SQL();

		JdbcWork getdata = new JdbcWork() {
			@Override
			public Object fillData(ResultSet rs) {
				//List<Equipment> result = new ArrayList<Equipment>();
				StringBuffer buff=new StringBuffer("[");
				try {
					while (rs.next()) {
						
						    buff.append("["+rs.getString("EQUIPMENTID")+"','"+rs.getString("EQUIPMENTNAME")+"',]'");
						
						buff.deleteCharAt(buff.length() - 1);
					}
					buff.append("]");
					//buff.append(pb.getPageSize());
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return buff.toString();
			}
		};
		//JdbcHelper help = new JdbcHelper();
		helper.setJdbcWork(getdata);
		helper.setSql(JdbcHelper.getPagingSql(sql, start, limit));
		return (String) getHibernateTemplate().execute(helper);
	}

	@Override
	/*
	 * 2014/06/09  设备管理与业务资料的查询的网点名称
	 * */
	public Equipment getselectEqName(String id)throws Exception {
		 String hql="from Equipment e where  e.equipmentId='"+id+"'";
		   System.out.println("====dao==="+hql);
		   List<Equipment> eqName=this.getHibernateTemplate().find(hql);
		// return (Equipment) this.getHibernateTemplate().find(hql);
		   if(eqName.size() == 0){
			   return null;
		   }else{
			   return eqName.get(0);
		   }
		   
	}

	@Override
	public List<ConHis> selectCoHis() {
		String hql="from ConHis ch";
		List<ConHis> conhis = this.getHibernateTemplate().find(hql);
		System.out.println("=================equipments=" + conhis);
		System.out.println("===========equipments" + conhis.size());
		return conhis;
	}
	
	
	
	
	
	//=============================================
	/**
	 * 2015/3/15
	 * 设备管理的查询
	 * （带分页）
	 * nk
	 */
	@Override
	public List<Equipment> listEquipment(Integer start, Integer limit,
			String bankname, String branchId,String operatorId) {
		System.out.println("---------ExamineReport---------");
		Query query;
		if(bankname==null && branchId==null && operatorId==null){
			 System.out.println("【UlEmployeeDaoImpl 】调用--listEquipment   查询所有");
			 //String hql = "from Equipment e where e.delFlag=1 order by e.equipmentId desc";
			 String hql = "from Equipment e where e.delFlag=1 order by e.equipmentId desc";
			 query = getSession().createQuery(hql);
			 System.out.println("=============query" + query);
			 query.setFirstResult(start);
			 query.setMaxResults(limit);
			 System.out.println("===start==="+start+"======"+limit);
		}else{
			//多条件的查询，用StringBuffer拼接字符串，在连接的时候 不能用or，or当查询多个条件的不能任意匹配，用and(切记)
				StringBuffer hql=new StringBuffer("from  Equipment  e where  1=1 and e.delFlag=1 ");
				
				if(!"".equals(bankname)&& bankname!=null){
					hql.append(" and e.bankname like '%" + bankname + "%'");
					hql.append(" or e.parentName like '%" + bankname + "%'");
				}
				
				if(!"".equals(branchId)&& branchId!=null){
					hql.append(" and e.branchId like '%" + branchId + "%'");
				}	
				if(!"".equals(operatorId)&& operatorId!=null){
					hql.append(" and e.operatorId like '%" + operatorId + "%'");
				}
				System.out.println("===【UlEmployeeDaoImpl 】调用==operatorId"+branchId+bankname+"============"+operatorId);
				query = getSession().createQuery(hql.toString());
				System.out.println("=【UlEmployeeDaoImpl 】调用===query="+ query);
				query.setFirstResult(start);//hibernate自带的分页查询，起始页
     		    query.setMaxResults(limit);//结束页
				
		}
	  return query.list();
	}

	@Override
	public Integer listEquipmentCount(String bankname, String branchId,String operatorId) {
		System.out.println("【UlEmployeeDaoImpl 】调用==ExamineReportAllCountIf  ");
		SqlBuilder.BEGIN();
		SqlBuilder.SELECT("count(EId)");
		SqlBuilder.FROM(" EQUIPMENT e ");
		 SqlBuilder.WHERE(" e.delFlag=1 ");
		if(bankname==null && branchId==null && operatorId==null){
			System.out.println("查询所有数据");
		}else {
			if(!"".equals(bankname)&& bankname!=null){
				System.out.println("jjfjfjf"+bankname);
				 SqlBuilder.WHERE(" e.BANK_NAME like"+"'%"+bankname+"%'");
				 SqlBuilder.WHERE(" e.PARENT_NAME like"+"'%"+bankname+"%'");
			}
			
			if(!"".equals(branchId)&& branchId!=null){
				 SqlBuilder.WHERE(" e.BRANCH_ID like"+"'%"+branchId+"%'");
			}
			if(!"".equals(operatorId)&& operatorId!=null){
				 SqlBuilder.WHERE(" e.OPERATOR_ID like"+"'%"+operatorId+"%'");
			}
			
			    System.out.println("查询所有数据 else ");
	         }
		String sql_getCount = SqlBuilder.SQL();
		
		return JDBCCount(sql_getCount);
	}
	
	
	public Integer JDBCCount(String sqlCount){
		JdbcWork count =new JdbcWork(){
			public Object fillData(ResultSet rs) {
				int result = 0;
				try {
					rs.next();
					result = rs.getInt(1);
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return result;
			}
		};
		JdbcHelper help = new JdbcHelper();
		help.setJdbcWork(count);
		help.setSql(sqlCount);
		return (Integer) getHibernateTemplate().execute(help);
	}

	@Override
	public void addlistEquipment(String equipmentId, String operatorId,
			String equipmentName, String branchId, String curdate,
			String bankTypeId, String bankTypeName, String ip, String parentId,String address,String parentName) {
		System.out.println("【UlEmployeeDaoImpl 】调用========addlistEquipment    dao");
		System.out.println("=【UlEmployeeDaoImpl 】调用========="+bankTypeName+bankTypeId+curdate+branchId+
				equipmentName+operatorId+equipmentId+ip);
		Transaction tx = getSession().beginTransaction();
		Equipment eq= new Equipment() ;
		eq.setEquipmentId(equipmentId);
		eq.setOperatorId(operatorId);
		eq.setEquipmentName(equipmentName);
		eq.setBranchId(branchId);
		eq.setCurdate(curdate);
		eq.setBankTypeId(new Long (bankTypeId));
		eq.setBankname(bankTypeName);
		eq.setIpAddress(ip);
		eq.setParentId(new Long(parentId));
		eq.setDelFlag(new Long(1));
		eq.setAddress(address);
		eq.setParentName(parentName);
		getSession().saveOrUpdate(eq);
	   tx.commit();
		
		
	}

	@Override
	public Equipment getByEquipmentId(String equipmentId) {
		String hql="from Equipment e where e.Equipment=?";
		return (Equipment)findUnique(hql, new Object[]{equipmentId});
	}

	@Override
	public void updatelistEquipment(Long EId, String equipmentId,
			String operatorId, String equipmentName, String branchId,
			String curdate, Long bankTypeId, String bankTypeName, String ip,
			Long parentId,String address,String parentName) {
		System.out.println("【UlEmployeeDaoImpl 】调用updatelistEquipment() " +
				"----address="+address+EId+equipmentId+curdate+bankTypeId+bankTypeName+parentId+ip);
		Transaction tx = getSession().beginTransaction();
			Equipment eq= new Equipment() ;
			eq.setEquipmentId(equipmentId);
			eq.setOperatorId(operatorId);
			eq.setEquipmentName(equipmentName);
			eq.setBranchId(branchId);
			eq.setCurdate(curdate);
			eq.setBankTypeId(new Long (bankTypeId));
			eq.setBankname(bankTypeName);
			eq.setIpAddress(ip);
			eq.setParentId(new Long(parentId));
			eq.setDelFlag(new Long(1));
			eq.setEId(EId);
			eq.setAddress(address);
			eq.setParentName(parentName);
		   getSession().saveOrUpdate(eq);
		  //getSession().update(eq);
		   tx.commit();
		
//		Transaction tx = getSession().beginTransaction();
//		Equipment equipment = new Equipment();
		//String hql="update EQUIPMENT e set e.EQUIPMENTID='"+equipmentId+"',e.OPERATOR_ID='"+operatorId+"', e.EQUIPMENTNAME='"+equipmentName+"', e.BRANCH_ID='"+branchId+"' ,e.CUR_DATE='"+curdate+"', e.BANK_NAME='"+bankTypeName+"',e.IP_ADDRESS='"+ip+"' ,e.PARENT_ID="+parentId+" ,e.BANK_TYPE_ID="+bankTypeId+" where e.EId="+EId+" and e.delFlag=1";
         
		//String hql="update EQUIPMENT e set e.EQUIPMENTID=?,e.OPERATOR_ID=?, e.EQUIPMENTNAME=?, e.BRANCH_ID=? ,e.CUR_DATE=?, e.BANK_NAME=?,e.IP_ADDRESS=? ,e.PARENT_ID=? ,e.BANK_TYPE_ID=? where e.EId='"+EId+"' and e.delFlag=1";
		
//		String hql="update Equipment e set e.equipmentId=?,e.operatorId=?, e.equipmentName=?, e.branchId=? ,e.curdate=?, e.bankname=?,e.ipAddress=? ,e.parentId=? ,e.bankTypeId=? where e.EId="+EId+" and e.delFlag=1";
//		Query query=getSession().createQuery(hql);
//		//Query query=getSession().createSQLQuery(hql);
//		query.setString(0,equipmentId);
//		query.setString(1, operatorId);
//		//query.setString(2, equipmentId);
//		query.setString(2, branchId);
//		query.setString(3,curdate);
//		query.setLong(4, bankTypeId);
//		query.setString(5,bankTypeName);
//		query.setString(6,equipmentName);
//		query.setString(7, ip);
//		query.setLong(8,parentId);
//		query.executeUpdate();
//		
//		System.out.println("=============="+query);
		
		
		
		//getHibernateTemplate().update(hql);
		// Query query=getSession().createSQLQuery(hql);
          //query.executeUpdate();
		
		//		Query query = getSession()
//				.createSQLQuery(
//						"update EQUIPMENT" +
//						" e set e.EQUIPMENTID='"+equipmentId+"',e.OPERATOR_ID='"+operatorId+"',e.EQUIPMENTNAME='"+equipmentName+"',e.BRANCH_ID='"+branchId+"',e.CUR_DATE='"+curdate+"',e.BANK_NAME="+bankTypeName+",'e.IP_ADDRESS='"+ip+"',e.PARENT_ID="+parentId+",e.BANK_TYPE_ID="+bankTypeId+" where e.EId="+EId+" and e.delFlag=1");
//		System.out.println("====query" + query);
//		System.out.println("=======update=====query" + query);
////		query.setString(0, equipmentId);
////		query.setString(1, equipmentName);
////		// query.setString(1,equipment.getEquipmentName());
////		// query.setString(2, equipment.getEquipmentName());
////		query.setLong(2, EId);
		System.out.println("e.equipmentId=?,e.equipmentName=? where EId=?"
				+ EId);
		// query.setLong(3, equipment.getEId());
		//query.;

		//tx.commit();

		System.out.println("==============dao修改====成功");
		
		
		
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	}


	




