package com.ulane.base.action.xitong;

/*
 *  北京优创融联科技有限公司 综合客服管理系统   --  http://www.ulane.cn
 *  Copyright (C) 2008-2010 Beijing Ulane Technology Co., LTD
 */
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.htsoft.core.Constants;
import com.htsoft.core.command.QueryFilter;
import com.htsoft.core.model.OnlineUser;
import com.htsoft.core.util.AppUtil;
import com.htsoft.core.util.BeanUtil;
import com.htsoft.core.util.ContextUtil;
import com.htsoft.core.util.JsonUtil;
import com.htsoft.core.web.action.BaseAction;
import com.htsoft.core.web.paging.PagingBean;
import com.htsoft.oa.model.system.AppUser;
import com.htsoft.oa.service.system.AppUserService;
import com.ulane.base.model.xitong.UlContactEmpl;
import com.ulane.base.model.xitong.UlDepartment;
import com.ulane.base.model.xitong.UlEmployee;
import com.ulane.base.service.xitong.UlContactEmplService;
import com.ulane.base.service.xitong.UlDepartmentService;
import com.ulane.base.service.xitong.UlEmployeeService;

import flexjson.JSONSerializer;
import flexjson.transformer.DateTransformer;

/**
 * 
 * @author cf0666@gmail.com
 * 
 */
public class UlEmployeeAction extends BaseAction {
	@Resource
	private AppUserService appUserService;
	@Resource
	private UlEmployeeService ulEmployeeService;
	@Resource
	private UlDepartmentService ulDepartmentService;
	@Resource
	private UlContactEmplService ulContactEmplService;

	private UlEmployee ulEmployee;
	private UlContactEmpl ulContactEmpl;

	private AppUser appUser;
	private Long useid;
	private Long depId;

	public UlContactEmpl getUlContactEmpl() {
		return ulContactEmpl;
	}

	public void setUlContactEmpl(UlContactEmpl ulContactEmpl) {
		this.ulContactEmpl = ulContactEmpl;
	}

	public Long getUseid() {
		return useid;
	}

	public void setUseid(Long useid) {
		this.useid = useid;
	}

	public UlEmployee getUlEmployee() {
		return ulEmployee;
	}

	public void setUlEmployee(UlEmployee ulEmployee) {
		this.ulEmployee = ulEmployee;
	}

	public Long getDepId() {
		return depId;
	}

	public void setDepId(Long depId) {
		this.depId = depId;
	}

	/**
	 * 显示列表
	 */
	public String list() {
		QueryFilter filter = new QueryFilter(getRequest());
		filter.addSorted("userNo", "asc");
		List<UlEmployee> list = ulEmployeeService.getAll(filter);
		// removeDeleted(list);
		for (UlEmployee u : list) {
			if (u.getParent() != null) {
				UlEmployee parent = ulEmployeeService.get(u.getParent());
				//u.setParentName(parent.getFullname());
			}
		}
		// Type type=new TypeToken<List<UlEmployee>>(){}.getType();
		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':")
				.append(filter.getPagingBean().getTotalItems()).append(
						",result:");

		// Gson gson=new Gson();
		// buff.append(gson.toJson(list, type));
		JSONSerializer ser = JsonUtil.getJSONSerializer();
		buff.append(ser.serialize(list));
		buff.append("}");

		jsonString = buff.toString();

		return SUCCESS;
	}

	/**
	 * 显示列表
	 */
	public String listBook() {

		QueryFilter filter = new QueryFilter(getRequest());
		filter.addSorted("useid", "asc");
		filter.addFilter("Q_status_L_NEQ", UlEmployee.FLAG_DELETED.toString());
		List<UlEmployee> list = ulEmployeeService.getAll(filter);
		removeDeleted(list);
		for (UlEmployee u : list) {
			if (u.getParent() != null) {
				UlEmployee parent = ulEmployeeService.get(u.getParent());
				u.setParentName(parent.getFullname());
			}
		}
		// Type type=new TypeToken<List<UlEmployee>>(){}.getType();
		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':")
				.append(filter.getPagingBean().getTotalItems()).append(
						",result:");

		// Gson gson=new Gson();
		// buff.append(gson.toJson(list, type));
		JSONSerializer ser = JsonUtil.getJSONSerializer();
		buff.append(ser.include("contacts").serialize(list));
		buff.append("}");

		jsonString = buff.toString();

		return SUCCESS;
	}

	public String getContact() {
		if (useid == null) {
			return SUCCESS;
		}
		UlEmployee ulEmployee = ulEmployeeService.get(useid);
		JSONSerializer ser = JsonUtil.getJSONSerializer();
		Iterator<UlContactEmpl> it = ulEmployee.getContacts().iterator();
		while (it.hasNext()) {
			if (it.next().getDelFlag().equals(Constants.FLAG_DELETED)) {
				it.remove();
			}
		}

		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':")
				.append(ulEmployee.getContacts().size()).append(",result:");

		buff.append(ser.serialize(ulEmployee.getContacts()));
		buff.append("}");
		jsonString = buff.toString();
		return SUCCESS;
	}

	/**
	 * 批量删除
	 * 
	 * @return
	 */
	public String multiDel() {
		StringBuffer unDelName = new StringBuffer();
		String[] ids = getRequest().getParameterValues("ids");
		if (ids != null) {
			for (String id : ids) {
				UlEmployee tmp = ulEmployeeService.get(Long.parseLong(id));
				QueryFilter qf = new QueryFilter();
				qf.addFilter("Q_ulEmployee.useid_L_EQ", id);
				List<AppUser> rs = appUserService.getAllNoRequest(qf);
				if (rs.size() == 0) {
					// tmp.setStatus(UlEmployee.FLAG_DELETED.longValue());
					ulEmployeeService.save(tmp);
				} else {
					unDelName.append(tmp.getFullname() + ",");
				}
			}
		}
		if (unDelName.length() == 0) {
			jsonString = "{success:true}";
		} else {
			String data = unDelName.substring(0, unDelName.length() - 1);
			jsonString = "{success:false,data:'" + data + "'}";
		}

		return SUCCESS;
	}

	/**
	 * 批量启用
	 * 
	 * @return
	 */
	public String multiEnable() {
		String[] ids = getRequest().getParameterValues("ids");
		if (ids != null) {
			for (String id : ids) {
				UlEmployee tmp = ulEmployeeService.get(Long.parseLong(id));
				// tmp.setStatus(UlEmployee.FLAG_ENABLED.longValue());
				ulEmployeeService.save(tmp);
			}
		}
		jsonString = "{success:true}";
		return SUCCESS;
	}

	public String multiDelContact() {
		String[] ids = getRequest().getParameterValues("ids");
		if (ids != null) {
			for (String id : ids) {
				UlContactEmpl tmp = ulContactEmplService
						.get(Long.parseLong(id));
				tmp.setDelFlag(Constants.FLAG_DELETED);
				ulContactEmplService.save(tmp);
			}
		}

		jsonString = "{success:true}";

		return SUCCESS;
	}

	/**
	 * 显示详细信息
	 * 
	 * @return
	 */
	public String get() {
		UlEmployee ulEmployee = ulEmployeeService.get(useid);
		JSONSerializer ser = JsonUtil.getJSONSerializer();
		if (ulEmployee.getParent() != null)
			ulEmployee.setParentName(ulEmployeeService.get(
					ulEmployee.getParent()).getFullname());
		// Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
		// 将数据转成JSON格式
		// try {
		// BeanInfo beaninfo = java.beans.Introspector
		// .getBeanInfo(UlEmployee.class);
		// String[] fields = new
		// String[beaninfo.getPropertyDescriptors().length];
		// for (PropertyDescriptor pd : beaninfo.getPropertyDescriptors()) {
		// int i = 0;
		// if (pd.getName().equals("parentEmp")
		// || pd.getName().equals("ulDepartment")) {
		// fields[i] = pd.getName() + ".*";
		// } else {
		// fields[i] = pd.getName();
		// }
		// System.out.println("add --" + fields[i]);
		// i++;
		// }
		// ser.include(fields).exclude("*");
		// } catch (IntrospectionException e) {
		// }
		// ser.include("useid", "alias", "birthday", "biyeyuanxiao",
		// "education",
		// "email", "fullname", "gongzuodiDiqu", "gongzuodiGuojia",
		// "gongzuodiSheng", "gongzuodiShi", "hetongdaoqishijian",
		// "hujiDiqu", "hujiGuojia", "hujiSheng", "hujiShi", "note",
		// "parentEmp.*", // "ruzhifangshi", "sex", "status", "type",
		// "zhiji", "zhiwei", "zhuanzhengshijian", "ulDepartment.*")
		// .exclude("*");
		ser.transform(new DateTransformer("yyyy-MM-dd"), "zhuanzhengshijian");
		ser.transform(new DateTransformer("yyyy-MM-dd"), "birthday");
		ser.transform(new DateTransformer("yyyy-MM-dd"), "hetongdaoqishijian");
		ser.transform(new DateTransformer("yyyy-MM-dd"), "ruzhishijian");
		StringBuffer sb = new StringBuffer("{success:true,data:");
		sb.append(ser.serialize(ulEmployee));
		sb.append("}");
		setJsonString(sb.toString());
		return SUCCESS;
	}

	/**
	 * 添加及保存操作
	 */
	public String save() {
		String details = getRequest().getParameter("details");
		if (StringUtils.isNotEmpty(details)) {
			Gson gson = new Gson();
			UlContactEmpl[] detailArr = (UlContactEmpl[]) gson.fromJson(
					details, UlContactEmpl[].class);
			ulEmployee.getContacts().clear();
			if (detailArr != null) {
				for (UlContactEmpl detail : detailArr) {
					detail.setUlEmployee(ulEmployee);
					detail.setDelFlag(Constants.FLAG_UNDELETED);
					ulEmployee.addContact(detail);
				}
			}
		}

		if (ulEmployee.getUseid() == null) {
			// ulEmployee.setStatus(UlEmployee.FLAG_DISABLED.longValue());
			ulEmployeeService.save(ulEmployee);
		} else {
			// UlEmployee orgUlEmployee =
			// ulEmployeeService.get(ulEmployee.getUseid());
			// try {
			// BeanUtil.copyNotNullProperties(orgUlEmployee,ulEmployee);
			// } catch (IllegalAccessException e) {
			// e.printStackTrace();
			// } catch (InvocationTargetException e) {
			// e.printStackTrace();
			// }
			// for(UlContactEmpl tmp : rs){
			// orgUlEmployee.getContacts().clear();
			// orgUlEmployee.addContact(tmp);
			// }
			// ulEmployeeService.remove(ulEmployee);
			ulEmployeeService.merge(ulEmployee);
			QueryFilter qf = new QueryFilter();
			Long id = ulEmployee.getUseid();
			qf.addFilter("Q_ulEmployee.useid_L_EQ", id.toString());
			List<AppUser> rs = appUserService.getAllNoRequest(qf);
			for (AppUser tmp : rs) {
				tmp.setFullname(ulEmployee.getFullname());
				appUserService.save(tmp);
			}
			// //数据库中已有的子集
			// List<UlContactEmpl> con_db = ulContactEmplService.getAllByUseid(
			// ulEmployee.getUseid());
			// //页面提交过来的子集
			// Set<UlContactEmpl> con_page = ulEmployee.getContacts();
			// for(UlContactEmpl tmp_db : con_db){
			// boolean have = false;
			// if(!con_page.isEmpty()){
			// for(UlContactEmpl ulContactDep : con_page){
			// ulContactEmplService.save(ulContactDep);
			// if(tmp_db.getContactEmplId().equals(
			// ulContactDep.getContactEmplId())){
			// have = true;
			// }
			// }
			// }
			// if(!have){
			// tmp_db.setDelFlag(Constants.FLAG_DELETED);
			// ulEmployee.getContacts().add(tmp_db);
			// }
			// // waulContactDepService.save(tmp_db);
			// }
			// UlDepartment orgUlDepartment = new UlDepartment();
			// BeanUtil.copyNotNullProperties(orgUlDepartment,ulDepartment);

			// ulEmployeeService.save(ulEmployee);
		}
		setJsonString("{success:true}");
		return SUCCESS;

	}

	public String selects() {
		PagingBean pb = getInitPagingBean();
		List<UlEmployee> list = new ArrayList<UlEmployee>();
		QueryFilter filter = new QueryFilter(getRequest());
		filter.addSorted("userNo", "asc");
		// filter
		// .addFilter("Q_delFlag_SN_EQ", Constants.FLAG_UNDELETED
		// .toString());
		// query appuser

		list = ulEmployeeService.getAll(filter);
		// 员工所属部门
		for (UlEmployee employee : list) {
			UlDepartment dep = ulDepartmentService.get(employee
					.getUlDepartment().getDepid());
			employee.setDeptName(dep.getDepname());
		}

//		pb.setTotalItems(list.size());
		int count = ulEmployeeService.getEmployeeCount();
		// removeDeleted(list);
		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':")
				.append(filter.getPagingBean().getTotalItems()).append(",result:");
		JSONSerializer serializer = new JSONSerializer();
		serializer.transform(new DateTransformer("yyyy-MM-dd"),
				new String[] { "accessionTime" });
		buff.append(serializer.exclude(new String[] { "password" }).serialize(
				list));
		buff.append("}");

		jsonString = buff.toString();
		return SUCCESS;
	}

	/**
	 * 根据组织机构查询
	 * 
	 * @return
	 */
	public String select() {
		PagingBean pb = getInitPagingBean();
		String strDepId = getRequest().getParameter("depId");
		// 表示从上级目录开始进行查找
		String path = "0.";
		appUser = ContextUtil.getCurrentUser();
		AppUser appUsers = appUserService.get(appUser.getUserId());
		if (appUsers.getUlEmployee() != null) {
			ulEmployee = ulEmployeeService.get(new Long(appUsers
					.getUlEmployee().getUseid()));
		}

		if (StringUtils.isNotEmpty(strDepId)) {
			Long depId = Long.parseLong(strDepId);
			UlDepartment dep = ulDepartmentService.get(depId);
			if (dep != null) {
				path = dep.getPath();
			}
		} else if (ulEmployee != null) {
			UlDepartment dep = ulEmployee.getUlDepartment();
			if (dep != null) {
				path = dep.getPath();
			}
		}
		List<UlEmployee> list = ulEmployeeService.findByDepartment(path, pb);

		List<UlEmployee> list1 = new ArrayList<UlEmployee>();
		for (UlEmployee e : list) {
			try {
				UlEmployee ulEmployee = new UlEmployee();
				BeanUtil.copyNotNullProperties(ulEmployee, e);
				list1.add(ulEmployee);
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		// removeDeleted(list1);
		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':")
				.append(pb.getPageSize()).append(",result:");
		
//		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':")
//		.append(filter.getPagingBean().getTotalItems()).append(",result:");
		
		JSONSerializer serializer = new JSONSerializer();
		serializer.transform(new DateTransformer("yyyy-MM-dd"),
				new String[] { "accessionTime" });
		buff.append(serializer.exclude(
				new String[] { "password", "ulDepartment" }).serialize(list1));
		buff.append("}");

		jsonString = buff.toString();
		return SUCCESS;
	}

	/**
	 * 在线员工
	 * 
	 * @return
	 */
	public String online() {
		Map<String, OnlineUser> onlineUsers = new HashMap<String, OnlineUser>();
		Map<String, OnlineUser> onlineUsersByDep = new HashMap<String, OnlineUser>();

		onlineUsers = AppUtil.getOnlineUsers();// 获得所有在线用户

		// 按部门选择在线用户
		if (depId != null) {
			for (String sessionId : onlineUsers.keySet()) {
				OnlineUser onlineUser = new OnlineUser();
				onlineUser = onlineUsers.get(sessionId);
				// if(onlineUser.getDepId().equals(depId)){
				String path = "";
				if (!onlineUser.getUserId().equals(AppUser.SUPER_USER)) {
					path = onlineUser.getDepPath();
				}
				if (!depId.equals(new Long(0))) {
					if (java.util.regex.Pattern.compile("." + depId + ".")
							.matcher(path).find()) {
						onlineUsersByDep.put(sessionId, onlineUser);
					}
				} else {
					onlineUsersByDep.put(sessionId, onlineUser);
				}
			}
		}

		Type type = new TypeToken<java.util.Collection<OnlineUser>>() {
		}.getType();
		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':")
				.append(onlineUsers.size()).append(",result:");

		Gson gson = new Gson();
		if (depId != null) {
			buff.append(gson.toJson(onlineUsersByDep.values(), type));
		} else {
			buff.append(gson.toJson(onlineUsers.values(), type));
		}
		buff.append("}");
		jsonString = buff.toString();
		return SUCCESS;
	}

	/**
	 * 将list中的已标记删除的节点去掉
	 * 
	 * @param list
	 * @return
	 */
	public void removeDeleted(List<UlEmployee> list) {
		Iterator<UlEmployee> i_list = list.iterator();
		while (i_list.hasNext()) {
			if (i_list.next().getStatus()
					.equals(UlEmployee.FLAG_DELETED.longValue()))
				i_list.remove();
		}
	}

	/**
	 * lq
	 * 
	 * @return
	 */
	public String contacts() {
		String ueid = getRequest().getParameter("employeeid");
		if (StringUtils.isNotEmpty(ueid)) {
			UlEmployee ue = ulEmployeeService.get(Long.parseLong(ueid));
			Set ss = ue.getContacts();
			List<UlEmployee> uelist = new ArrayList<UlEmployee>();
			// for(int i=0;i< ss.size();i++){
			// uelist.add();
			// }
			uelist = new ArrayList<UlEmployee>(ss);
			StringBuffer childlistSB = new StringBuffer("{success:true,data:");
			JSONSerializer jsonserializer = new JSONSerializer();
			jsonserializer.transform(new DateTransformer("yyyy-MM-dd"),
					new String[] {});
			childlistSB.append(jsonserializer.serialize(uelist));
			childlistSB.append("}");
			jsonString = childlistSB.toString();

			// StringBuffer sb = new StringBuffer("{success:true,data:");
			// sb.append(json.exclude(new String[] { "class" }).serialize(job));
			// sb.append("}");
			// setJsonString(sb.toString());
		}
		return SUCCESS;
	}

}
